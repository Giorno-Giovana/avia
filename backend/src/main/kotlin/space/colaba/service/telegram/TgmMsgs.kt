package space.colaba.service.telegram

import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup.Companion.createSingleButton
import com.github.kotlintelegrambot.entities.ParseMode.MARKDOWN
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton.Url
import com.github.kotlintelegrambot.extensions.filters.Filter
import org.slf4j.LoggerFactory
import space.colaba.config.frontendMainPage
import space.colaba.service.telegram.TelegramBotService.Companion.cacheEmail
import space.colaba.service.telegram.TelegramBotService.Companion.cacheStatuses
import space.colaba.service.telegram.TgmCommands.chatId
import space.colaba.service.telegram.predicats.TicketNumber

internal object TgmMsgs {
    var testEmail = "tmtaniuha@gmail.com"


    fun Dispatcher.locationTrigger() {
        message(Filter.Location) {
            val chatId = chatId().id
            cacheStatuses.getIfPresent(chatId)?.run {
                log.info("Coordinates: chatId=${chatId}, status=$this, location=${message.location}")
                if (this == TgmStatus.COORDINATES) {
                    cacheStatuses.put(chatId, TgmStatus.STARTED)
                    bot.sendMessage(
                        chatId = chatId(),
                        text = "–ú—ã –Ω–∞—à–ª–∏ –ø—É–Ω–∫—Ç —Å–¥–∞—á–∏ –±–∞–≥–∞–∂–∞ üìç `—É–ª. –ü—è—Ç–Ω–∏—Ü–∫–∞—è 65/10`  –≤ *2—Ö* –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –≤–∞—Å. " +
                                "\n–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å –±–∞–≥–∞–∂ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ª–∏–±–æ –∑–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞.",
                        parseMode = MARKDOWN,
                        replyMarkup = createSingleButton(
                            Url("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ", "$frontendMainPage")
                    ))
    } } } }


    fun Dispatcher.ticketNumberTrigger() {
        message(TicketNumber) {
            val chatId = chatId().id
            log.info("Coordinates: chatId=${chatId}, location=${message.location}")
            log.info("üöÅ chatId: [${chatId().id}] for TEST user: [$testEmail]")

            cacheEmail.put(testEmail, chatId().id)

            cacheStatuses.put(chatId, TgmStatus.LOGGED_IN)

            bot.sendMessage(
                chatId = chatId(),
                text = "\uD83C\uDF89 –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ú—ã –Ω–∞—à–ª–∏ –≤–∞—à —Ä–µ–π—Å." +
                        "\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 19:55 (–≤—Å–∫—Ä, 25 –∞–ø—Ä–µ–ª—è)" +
                        "\n–ü—Ä–∏–±—ã—Ç–∏–µ: 20:55" +
                        "\n–ì–µ–π—Ç: *32*",
                parseMode = MARKDOWN,
                replyMarkup = createSingleButton(
                    Url("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ", "$frontendMainPage")
            ))
    } }

    private val log = LoggerFactory.getLogger(this::class.java)

}

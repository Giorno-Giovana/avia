<template>
  <v-container>
    <v-row justify="center" align="center" class="full-width">
      <v-col cols="1" class="hidden-sm-and-down"/>

      <v-col md="4" sm="6">
        <v-card class="elevation-12 rounded" color="" style="z-index:10">
            <v-btn v-show="!iForgotMode" class="pl-5 rounded-top-left">Вход</v-btn>



          <v-card-text v-model="tabs">
            <!-- LOGIN -->
            <v-tab-item>
              <v-card class="px-2 " v-show="iForgotMode" flat>
                <v-btn class="mt-4 ml-n2" @click="iForgotMode=false" color="grey" text small>
                  <v-icon small>{{ mdiChevronLeft }}</v-icon>
                  назад
                </v-btn>
                <v-card-title class="pb-0 pt-2">Забыли пароль?</v-card-title>
                <v-card-text>
                  Мы отправим ссылку для востановления пароля на вашу электронную
                  почту, адрес которой вы указали при регистрации
                </v-card-text>
              </v-card>
              <!--INPUTS-->
              <v-card flat class="rounded">
                <v-card-text class="px-6 pt-10">
                  <v-form ref="form" v-model="valid" lazy-validation>
                    <v-text-field label="Электронная почта" validate-on-blur clearable required
                                  v-model="userPrincipal.email" :rules="emailRules"/>
                    <v-text-field v-show="!iForgotMode" label="Пароль" validate-on-blur required
                                  v-model="userPrincipal.password" :rules="passwordRules"
                                  :append-icon="showPassword ? mdiEyeOutline : mdiEyeOffOutline"
                                  :type="showPassword ? 'text' : 'password'"
                                  @click:append="showPassword = !showPassword"/>
                    <v-btn class="mt-n3" v-show="!iForgotMode" :loading="loading" color="grey"
                           right absolute text x-small>
                      забыли пароль
                    </v-btn>
                  </v-form>
                </v-card-text>

                <!--ACTIONS-->
<!--                <v-container v-show="iForgotMode">-->
<!--                  <v-btn class="my-5 btn-colaba" @click="sendRecovery" :loading="loading" :disabled="!valid" large-->
<!--                         depressed block>-->
<!--                    Отправить инструкцию-->
<!--                  </v-btn>-->
<!--                </v-container>-->

                <v-container v-show="!iForgotMode">
                  <v-btn class="mt-12 btn-colaba" @click="login" :disabled="!valid" :loading="loading" depressed block>
                    Войти
                  </v-btn>
                </v-container>
                <v-container v-show="!iForgotMode">
                  <v-row justify="space-around" no-gutters>
                    <v-col class="d-flex justify-center">
                      <div class="separator">ИЛИ</div>
                    </v-col>
                  </v-row>
                </v-container>
                <v-container v-show="!iForgotMode" class="mt-n2">
                  <v-row justify="space-around" no-gutters>
                    <v-col class="d-flex justify-center">
                      <v-btn :href="googleLink" @click="loading=true" :loading="loading"  icon>
                        <v-icon style="color: #4285F4">{{ mdiGoogle }}</v-icon>
                      </v-btn>
                    </v-col>
                    <v-col class="d-flex justify-center">
                      <v-btn :href="facebookLink" @click="loading=true" :loading="loading" icon>
                        <v-icon style="color: #1777F2">{{ mdiFacebook }}</v-icon>
                      </v-btn>
                    </v-col>
                    <v-col class="d-flex justify-center">
                      <v-btn :href="vkontakte" @click="loading=true" :loading="loading" icon>
                        <v-icon style="color: #4174A1">{{ mdiVk }}</v-icon>
                      </v-btn>
                    </v-col>
                    <v-col class="d-flex justify-center">
                      <v-btn :href="yandexOauth" @click="loading=true" :loading="loading" icon>
                        <v-img contain height="20" :src="yandex"/>
                      </v-btn>
                    </v-col>
                  </v-row>
                </v-container>
              </v-card>
            </v-tab-item>

            <!-- REGISTRATION -->
            <v-tab-item>
              <v-card flat>
                <v-card-text class="px-6 py-7">
                  <v-form ref="form" v-model="valid" lazy-validation>
                    <v-text-field label="Электронная почта" validate-on-blur clearable required
                                  v-model="userPrincipal.email" :rules="emailRules"/>
                    <v-text-field label="Пароль" validate-on-blur required
                                  v-model="userPrincipal.password" :rules="passwordRules"
                                  :append-icon="showPassword ? mdiEyeOutline : mdiEyeOffOutline"
                                  :type="showPassword ? 'text' : 'password'"
                                  @click:append="showPassword = !showPassword"/>
                    <v-text-field label="Пароль еще раз" validate-on-blur required
                                  v-model="passwordConfirmation"
                                  :rules="passwordConfirmationRules" type="password"/>
                  </v-form>
                </v-card-text>
                <!--ACTIONS-->
                <v-container>
                  <v-row no-gutters>
                    <v-col>
                      <v-btn class="btn-colaba"
                             @click="register" :disabled="!valid" :loading="loading" depressed block>
                        Зарегистрироваться
                      </v-btn>
                    </v-col>
                  </v-row>
                </v-container>
              </v-card>

              <v-card-text class="txt-lighten2 pt-1 pb-1 text-caption" align="center">
                Я соглашаюсь с
                <nuxt-link class="logo primary-lighten1" to="/terms" exact>условиями использования
                </nuxt-link>
                и подтверждаю, что ознакомился с
                <nuxt-link class="logo primary-lighten1" to="/conditions" exact> политикой
                  конфиденциальности
                </nuxt-link>
              </v-card-text>
            </v-tab-item>
          </v-card-text>
        </v-card>
      </v-col>

      <v-col class="hidden-sm-and-down">
        <v-img contain min-height="65vh" :src="picture"/>
      </v-col>

    </v-row>

    <section class='wave-container'>
      <div class='wave -one'></div>
      <div class='wave -two'></div>
      <div class='wave -three'></div>
    </section>

    <v-snackbar top multi-line v-model="snackbar.show"
                :timeout="snackbar.timeout"
                :color="snackbar.color">
      {{ snackbar.text }}
      <v-btn text @click="snackbar.show=false">Закрыть</v-btn>
    </v-snackbar>

  </v-container>
</template>

<script>
import Cookie from "js-cookie";
import {mdiChevronLeft, mdiEyeOffOutline, mdiEyeOutline, mdiFacebook, mdiGoogle, mdiVk} from '@mdi/js'

export default {
  layout: 'nonavigation',
  mounted() {
    if (!this.$auth.user && !this.$auth.loggedIn) {
      Cookie.remove(process.env.TOKEN_COOKIE_KEY, {path: ''});
      Cookie.remove(process.env.TOKEN_COOKIE_KEY.replace('token', 'refresh_token'), {path: ''});
    } else this.$router.push('/');

    this.userLocaleAndTimezone();
    Cookie.set('Referer', location.origin, {path: '/login'});
  },
  data() {
    const baseUrl = process.env.API_URL;
    return {
      mdiVk, mdiGoogle, mdiFacebook, mdiEyeOutline, mdiChevronLeft, mdiEyeOffOutline,
      tabs: null,
      valid: true,
      loading: false,
      iForgotMode: false,
      showPassword: false,
      picture: require('assets/svg/login.svg'),
      yandex: require('assets/svg/yandex_icon.svg'),
      vkontakte: baseUrl + process.env.VK_URL,
      googleLink: baseUrl + process.env.GOOGLE_URL,
      yandexOauth: baseUrl + process.env.YANDEX_URL,
      facebookLink: baseUrl + process.env.FACEBOOK_URL,
      emailRules: [
        v => !!v || 'Укажите адресс своей эл. почты',
        v => /.+@.+\..+/.test(v) || 'Введите правильный адрес',
        v => (v && v.length < 40) || 'Адрес слишком длинный'
      ],
      passwordRules: [
        v => !!v || 'Придумайте пароль',
        v => (v == null || v.length >= 4) || 'Минимум 4 символа',
        v => (v && v.length < 250) || 'Пароль слишком длинный'
      ],
      snackbar: {show: false, timeout: 3000, text: '', color: 'info'},
      userPrincipal: {email: null, password: null, timezone: null, locale: null},
      passwordConfirmation: null,
    };
  },
  computed: {
    passwordConfirmationRules() {
      return [
        v => !!v || 'Введите пароль еше раз',
        v => (v == null || v === this.userPrincipal.password) || 'Пароль не совпадает'
      ]
    }
  },
  methods: {
    showSnackbar(text) {
      this.snackbar.color = 'info';
      this.snackbar.text = text;
      this.snackbar.show = true;
    },
    showError(text) {
      this.snackbar.color = 'error';
      this.snackbar.text = text;
      this.snackbar.show = true;
    },
    showUserNotFoundSnackbar() {
      this.showError('Пользователь с таким адресом электронной почты не найден. Постарайтесь вспомнить правильный адрес своей почты или зарегистрируйтесь');
    },
    validate() {
      this.valid = this.$refs.form.validate();
      return this.valid;
    },
    async isUsernameExist() {
      try {
        return await this.$axios.$get('/auth/guest/' + this.userPrincipal.email);
      } catch (exception) {
        this.valid = false;
        if (exception.response.status == process.env.NOT_ALLOWED_STATUS_CODE) this.showError('Вы заблокированы за плохое поведение 🥺 Уходите прочь, вам здесь не рады');
        setTimeout(function goAway() {
          location.replace('https://ru.wikipedia.org/wiki/Средний_палец_(жест)')
        }, 5000);
        throw exception;
      }
    },
    userLocaleAndTimezone() {
      try {
        const localOptions = Intl.DateTimeFormat().resolvedOptions();
        this.userPrincipal.timezone = localOptions.timeZone;
        this.userPrincipal.locale = localOptions.locale;
      } catch (e) {
        console.error('Error when computing user timezone & locale', e);
        return this.userPrincipal;
      }
    },
    async register() {
      if (this.validate()) {
        this.loading = true;
        try {
          const newUser = !await this.isUsernameExist();
          if (newUser) {
            const tokenInfo = await this.$axios.$post(process.env.REGISTRATION_URL, this.userPrincipal)
                .catch(error => {
                  if (error.response.status != process.env.UNAUTHORIZED) this.showError('Упс, регистрация не прошла 🥺');
                  console.error('Ошибка регистрации (бек): ', error);
                });
            if (!this.$auth.loggedIn) {
              console.warn('Registered. Not logged In... [setUserToken]')
              await this.$auth.setUserToken(tokenInfo.access_token, tokenInfo.refresh_token);
              // await this.$auth.local.token.set(tokenInfo.access_token);
              // await this.$auth.local.refreshToken.set(tokenInfo.refresh_token);
            }
          } else this.showError('Пользователь с таким адресом электронной почты уже зарегистрирован.');
        } catch (error) {
          console.error('Ошибка регистрации: ', error);
        } finally {
          this.loading = false;
        }
      }
    },
    async login() {
      if (this.validate()) {
        try {
          this.loading = true;
          const userExist = await this.isUsernameExist();
          if (userExist) {
            await this.$auth.loginWith('local', {data: this.userPrincipal})
                .catch(error => {
                  if (error.response.status != process.env.NOT_ALLOWED_STATUS_CODE)
                    this.showError('Неправильный пароль. Воспользуйтесь востановлением с отправкой письма на вашу электронную почту');
                  console.error('Ошибка логина (бек)', error);
                });
          } else this.showUserNotFoundSnackbar();
        } catch (error) {
          console.error('Ошибка логина: ', error);
        } finally {
          this.loading = false;
        }
      }
    },
    // async iForgotModeON() {
    //   this.iForgotMode = true;
    //   this.valid = true;
    //   this.$refs.form.resetValidation();
    //   const email = this.userPrincipal.email;
    //   const isValid = /.+@.+\..+/.test(email);
    //   return isValid && await this.isUsernameExist();
    // },
    // async sendRecovery() {
    //   try {
    //     this.loading = true;
    //     if (await this.iForgotModeON()) {
    //       const email = this.userPrincipal.email;
    //       await this.$axios.post(`${process.env.PASSWORD_URL}${email}/`, {headers: {'Content-Type': 'text/plain'}});
    //       this.showSnackbar('Ссылка для смены пароля отправлена на ваш адрес электронной почты: ' + email);
    //       this.valid = false;
    //     } else this.showUserNotFoundSnackbar();
    //   } catch (error) {
    //     console.error('Ошибка отправки востановления пароля', error);
    //   } finally {
    //     this.loading = false;
    //   }
    // }
  }
}
</script>

<style scoped lang="scss">
.rounded {
  border-radius: 15px !important;
}

.rounded-top-left:hover::before {
  border-top-left-radius: 15px !important;
}

.full-width {
  max-width: inherit !important;
}

.wave-container {
  position: fixed;
  top: 95vh;
  left: -60vw;
}

.wave {
  position: absolute;
  opacity: .3;
  width: 90em;
  height: 80em;
  border-radius: 43%;
  z-index: -1;
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  from {
    transform: rotate(360deg);
  }
}

.wave.-one {
  animation: rotate 15s infinite linear;
  opacity: .2;
  background: var(--v-primary-base);
}

.wave.-two {
  animation: rotate 7s infinite linear;
  background: var(--v-primary-lighten1);;
}

.wave.-three {
  animation: rotate 17s infinite linear;
  background: var(--v-primary-darken1);
}
</style>
